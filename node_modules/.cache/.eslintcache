[{"/Users/macpuk/Documents/GitHub/marvel/my-app/src/index.js":"1","/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/app/App.js":"2","/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/charInfo/CharInfo.js":"3","/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/errorBoundery/ErrorBoundery.js":"4","/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/appHeader/AppHeader.js":"5","/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/charList/CharList.js":"6","/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/randomChar/RandomChar.js":"7","/Users/macpuk/Documents/GitHub/marvel/my-app/src/services/MarvelService.js":"8","/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/skeleton/Skeleton.js":"9","/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/spinner/Spinner.js":"10","/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/error/ErrorMessage.js":"11","/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/myName/Name.js":"12"},{"size":241,"mtime":1677575578852,"results":"13","hashOfConfig":"14"},{"size":1249,"mtime":1677585214019,"results":"15","hashOfConfig":"14"},{"size":3462,"mtime":1677576279239,"results":"16","hashOfConfig":"14"},{"size":480,"mtime":1677564130121,"results":"17","hashOfConfig":"14"},{"size":559,"mtime":1629625706000,"results":"18","hashOfConfig":"14"},{"size":3643,"mtime":1677655657549,"results":"19","hashOfConfig":"14"},{"size":3350,"mtime":1677584986297,"results":"20","hashOfConfig":"14"},{"size":1314,"mtime":1677572749147,"results":"21","hashOfConfig":"14"},{"size":666,"mtime":1629627050000,"results":"22","hashOfConfig":"14"},{"size":4563,"mtime":1677146397173,"results":"23","hashOfConfig":"14"},{"size":191,"mtime":1677147219430,"results":"24","hashOfConfig":"14"},{"size":146,"mtime":1677585203056,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"23ztku",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/macpuk/Documents/GitHub/marvel/my-app/src/index.js",[],[],"/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/app/App.js",[],[],"/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/charInfo/CharInfo.js",["66"],[],"import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../error/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton'\nimport './charInfo.scss';\n\n\nclass CharInfo extends Component {\n\n    state = {\n        char: null,\n        loading: false,\n        error: false,\n        \n    }\n\n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        this.updateChar();\n    }\n\n    componentDidUpdate(prevProps) {\n        if(this.props.charId !== prevProps.charId) {\n            this.updateChar();\n        }\n    }\n\n    componentDidCatch(err, info) {\n        console.log(err, info);\n        this.setState({error: true})\n    }\n\n    updateChar = () => {\n        const {charId} = this.props;\n        if (!charId) {\n            return;\n        }\n        this.onCharLoading()\n\n        this.marvelService\n            .getCharacter(charId)\n            .then(this.onCharLoaded)\n            .catch(this.onError);\n\n        \n    }\n\n    onCharLoaded = (char) => {\n        this.setState({char, loading: false})\n    }\n\n    onCharLoading = () => {\n        this.setState({\n            loading: true\n        })\n    }\n\n    onError = () => {\n        this.setState({ loading: false, error: true})\n    }\n\n    render() {\n        const {char, loading, error} = this.state;\n\n\n        const skeleton = char || loading || error ? null : <Skeleton/>;\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ?  <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n    }\n    \n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n        <div className=\"char__basics\">\n            <img src={thumbnail} alt={name} style={imgStyle}/>\n            <div>\n                <div className=\"char__info-name\">{name}</div>\n                <div className=\"char__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n        <div className=\"char__descr\">\n            {description}\n        </div>\n        <div className=\"char__comics\">Comics:</div>\n        <ul className=\"char__comics-list\">\n            {comics.length > 0 ? null : 'There is no comics'}\n            {\n                comics.map((item, i) => {\n                    if(i > 9)return;\n                    return (\n                        <li key={i} className=\"char__comics-item\">\n                            {item.name}\n                        </li>\n                    )\n                })\n            }\n        </ul>\n        </>\n    )\n}\n\nCharInfo.protoTypes = {\n    charId:PropTypes.string\n}\n\nexport default CharInfo;","/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/errorBoundery/ErrorBoundery.js",[],[],[],"/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/appHeader/AppHeader.js",["67","68","69"],[],"import './appHeader.scss';\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <a href=\"#\">\n                    <span>Marvel</span> information portal\n                </a>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><a href=\"#\">Characters</a></li>\n                    /\n                    <li><a href=\"#\">Comics</a></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/charList/CharList.js",["70"],[],"import {Component} from 'react';\nimport PropTypes from 'prop-types'\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../error/ErrorMessage';\nimport MarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nclass CharList extends Component {\n\n    state = {\n        charList: [],\n        loading: true,\n        error: false,\n        newItemLoading: false,\n        offset: 210\n    }\n    \n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        this.onRequest();\n    }\n\n    onRequest = (offset) => {\n        this.onCharListLoading();\n        this.marvelService.getAllCharacters(offset)\n            .then(this.onCharListLoaded)\n            .catch(this.onError)\n    }\n\n    onCharListLoading = () => {\n        this.setState({\n            newItemLoading: true\n        })\n    }\n\n    onCharListLoaded = (newCharList) => {\n        this.setState(({offset,charList}) => ({\n            charList: [...charList, ...newCharList],\n            loading: false,\n            newItemLoading: false,\n            offset: offset + 9\n        }))\n    }\n\n    onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n\n    itemRefs = [];\n\n    setRef = (ref) => {\n        this.itemRefs.push(ref);\n    }\n\n    focusOnItem = (id) => {\n        this.itemRefs.forEach(item => item.classList.remove('char__item_selected'));\n        this.itemRefs[id].classList.add('char__item_selected');\n        this.itemRefs[id].focus();\n    }\n\n    renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    key={item.id}\n                    ref={this.setRef}\n                    onClick={() => { this.props.onCharSelected(item.id);\n                                    this.focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            this.props.onCharSelected(item.id);\n                            this.focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    render() {\n\n        const {charList, loading, error, offset, newItemLoading} = this.state;\n        \n        const items = this.renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? items : null;\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <button \n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    onClick={() => this.onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n}\n\n\nexport default CharList;","/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/randomChar/RandomChar.js",[],[],"/Users/macpuk/Documents/GitHub/marvel/my-app/src/services/MarvelService.js",[],[],"/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/skeleton/Skeleton.js",[],[],"/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/spinner/Spinner.js",[],[],"/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/error/ErrorMessage.js",[],[],"/Users/macpuk/Documents/GitHub/marvel/my-app/src/components/myName/Name.js",[],[],{"ruleId":"71","severity":1,"message":"72","line":118,"column":30,"nodeType":"73","messageId":"74","endLine":118,"endColumn":37},{"ruleId":"75","severity":1,"message":"76","line":7,"column":17,"nodeType":"77","endLine":7,"endColumn":29},{"ruleId":"75","severity":1,"message":"76","line":13,"column":25,"nodeType":"77","endLine":13,"endColumn":37},{"ruleId":"75","severity":1,"message":"76","line":15,"column":25,"nodeType":"77","endLine":15,"endColumn":37},{"ruleId":"78","severity":1,"message":"79","line":2,"column":8,"nodeType":"80","messageId":"81","endLine":2,"endColumn":17},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar"]